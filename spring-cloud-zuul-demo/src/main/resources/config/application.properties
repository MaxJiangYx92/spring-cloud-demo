spring.application.name=api-gateway
server.port=5555

# zuul路有规则配置
# 传统路由，单实例配置
#zuul.routes.api-a-url.path=/api-a-url/**
#zuul.routes.api-a-url.url=http://localhost:8080
# 传统路由，多实例配置
#zuul.routes.api-a-url.path=/api-a-url/**
#zuul.routes.api-a-url.serviceId=hello-service
#ribbon.eureka.enabled=false
#hello-service.ribbon.listOfServers=http://localhost:8080/,http://localhost:8081/

# 服务路由配置
# /? 单个字符，如：/api-a/a、/api-a/b....
# /* 多个字符，如：/api-a/aa、/api-a/bb.....
# /** 多个字符且多级（包括子级），如：/api-a/aa、/api-a/bb、/api-a/aa/bb、/api-a/aa/cc

zuul.prefix=/test
# 解决重定向，带上Host头信息
zuul.add-host-header=true
# 关闭zuul重试机制(全局）
zuul.retryable=false
# 指定api-a关闭重试机制
zuul.routes.api-a.retryable=false
# zuul自带hystrix和ribbon模块的依赖
# 设置hystrix
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=500
# 设置ribbon
ribbon.ConnectTimeout=2000

# 忽略此表达式的路由
zuul.ignored-patterns=/**/hello/**
zuul.routes.api-a.path=/api-a/**
zuul.routes.api-a.serviceId=hello-service
# cookie和头信息设置
#法1 为指定路由开启自定义敏感头
zuul.routes.api-a.customSensitiveHeaders=true
#法2 将指定路由的敏感头设置为空
zuul.routes.api-a.sensitiveHeaders=

# 单实例配置
zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.serviceId=feign-consumer

zuul.routes.api-c.path=/api-c/**
zuul.routes.api-c.url=http://localhost:9000/ribbon-users

# 多实例配置
zuul.routes.api-more.path=/user-service/**
# 手动配置服务名字
zuul.routes.api-more.serviceId=user-service
# Spring Cloud Zuul自带对Ribbon的依赖
# 默认情况下，Ribbon会根据服务发现机制来获取配置服务名称对应的实例清单
# 该示例没有整合Eureka，所以设置false
ribbon.eureka.enabled=false
# 实现服务和实例的维护
user-service.ribbon.listOfServers=http://localhost:8080,http://localhost:8081



eureka.instance.hostname=localhost
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:1111/eureka/